#!/usr/bin/env bash

# copyright 2023.
#
# licensed under the apache license, version 2.0 (the "license");
# you may not use this file except in compliance with the license.
# you may obtain a copy of the license at
#
#     http://www.apache.org/licenses/license-2.0
#
# unless required by applicable law or agreed to in writing, software
# distributed under the license is distributed on an "as is" basis,
# without warranties or conditions of any kind, either express or implied.
# see the license for the specific language governing permissions and
# limitations under the license.
#

set -eu -o pipefail

trap cleanup EXIT

SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)

# constants
declare -r BASE_COLLECTION_PATH=$1
declare -r UWM_NS="openshift-user-workload-monitoring"
declare -r UWM_INFO_DIR="${BASE_COLLECTION_PATH}/uwm-info"
declare -r CA_BUNDLE="${UWM_INFO_DIR}/ca-bundle.crt"

source "${SCRIPT_DIR}/common"

init() {
	mkdir -p "${UWM_INFO_DIR}"

	THANOS_RULER_ROUTE="$(oc get routes -n $UWM_NS thanos-ruler -o jsonpath='{.status.ingress[0].host}')" || return 1
	SA_TOKEN="$(oc create token default)" || return 1
	PROM_PODS="$(oc -n $UWM_NS get pods -l app.kubernetes.io/component=prometheus -oname)" || return 1

	return 0
}

cleanup() {
	log "Cleaning up..."
	rm "${CA_BUNDLE}"
}

get_rules() {
	log "getting prometheus rules"
	run oc -n openshift-config-managed get cm default-ingress-cert -o jsonpath='{.data.ca-bundle\.crt}' "${CA_BUNDLE}"
	run oc get --certificate-authority="${CA_BUNDLE}" \
		--token="${SA_TOKEN}" --server="https://${THANOS_RULER_ROUTE}" \
		--raw="/api/v1/rules" "${UWM_INFO_DIR}/rules.json"
}

get_from_prom_replica() {
	local replica="$1"
	shift
	local object="$1"
	shift
	local path="${1:-$object}"
	shift || true

	local result_path="${UWM_INFO_DIR}/${path}"
	mkdir -p "$(dirname "${result_path}")"
	run oc exec "${replica}" \
		-c prometheus \
		-n $UWM_NS \
		-- curl -sG "http://localhost:9090/api/v1/${object}" \
		"${result_path}.json"
}

get_from_prom_replicas() {
	local object="$1"
	shift
	local path="${1:-$object}"
	shift || true

	for pod in ${PROM_PODS}; do
		pod=$(echo "$pod" | awk -F '/' '{print $2}')
		log "getting ${object} from prometheus pod: ${pod}"
		get_from_prom_replica "${pod}" "${object}" "${pod}/${path}" || true
	done
}

main() {
	init || {
		log "cannot gather UWM details"
		return 0
	}

	get_rules || true
	get_from_prom_replicas status/runtimeinfo || true
	get_from_prom_replicas status/config || true
	get_from_prom_replicas 'targets?state=active' active-targets || true
	get_from_prom_replicas status/tsdb || true
}

main "$@"
